#!/usr/bin/env bash

################################################################################
# Configuration Parameters for running a multi-robot simulation from rosbags
################################################################################

# clear the already registered agents
source "${BASH_SOURCE%/*}/../config/slam/unset_registered_agents.sh"

export MR_NUM_OF_ROBOTS=1 # how many to spawn

# You can just have this ON even in single-robot cases. If you do want to turn
# this OFF however, make sure that the deciders/optimizer used are not specific
# to the multi-robot case (_MR suffix).
export MR_IS_MULTIROBOT_GRAPHSLAM=1

# Computer hostname
export MR_HOSTNAME="$(hostname)"

# Which set of rosbags to use for this demo?
# Available options are
# short
# medium
export MR_FILE_SUFFIX="short"

# All nodes read this variable and output the messages accordingly
export MR_OUTPUT_MESSAGES_TO="screen"

# Launch the graphSLAM-related nodes in differeent namespaces
export MR_USE_DIFFERENT_ROSCORES=1

# Syntax for each robot properties
# MR_ROBOT_X_PROPERTYNAME=PROPERTY_VALUE

# MR_ROBOT_1
###########################################

robot_id=1
robot_prefix="MR_ROBOT_${robot_id}"
robot_name="${MR_HOSTNAME}"

export ${robot_prefix}_MODEL="pioneer_3at"

# define the robot name. This will also be the corresponding namespace
export ${robot_prefix}_NAME="${robot_name}"

# deciders optimizers for the current robot agent
export ${robot_prefix}_NRD="CFixedIntervalsNRD_MR"
export ${robot_prefix}_ERD="CLoopCloserERD_MR"
export ${robot_prefix}_GSO="CLevMarqGSO"

# indicates the namespace of the robot as recorded in the rosbag
export ${robot_prefix}_OLD_ROBOT_NS="nickkoukubuntu"

# MR_ROBOT 2
###########################################

if [[ "MR_NUM_OF_ROBOTS" -gt 1 ]]; then
    robot_id=2
    robot_prefix="MR_ROBOT_${robot_id}"
    core_port=11312
    robot_name="${MR_HOSTNAME}_${core_port}"

    export ${robot_prefix}_MODEL="pioneer_3at"
    export ${robot_prefix}_NAME="${robot_name}"
    export ${robot_prefix}_NRD="CFixedIntervalsNRD_MR"
    export ${robot_prefix}_ERD="CLoopCloserERD_MR"
    export ${robot_prefix}_GSO="CLevMarqGSO"
    export ${robot_prefix}_OLD_ROBOT_NS="odroidxu3"

fi # end if MR_NUM_OF_ROBOTS > 1

# MR_ROBOT 3
###########################################

if [[ "MR_NUM_OF_ROBOTS" -gt 2 ]]; then
    robot_id=3
    robot_prefix="MR_ROBOT_${robot_id}"
    core_port=11313
    robot_name="${MR_HOSTNAME}_${core_port}"

    export ${robot_prefix}_MODEL="pioneer_3at"
    export ${robot_prefix}_NAME="${robot_name}"
    export ${robot_prefix}_NRD="CFixedIntervalsNRD_MR"
    export ${robot_prefix}_ERD="CLoopCloserERD_MR"
    export ${robot_prefix}_GSO="CLevMarqGSO"
    export ${robot_prefix}_OLD_ROBOT_NS="odroidu2"

fi # end if MR_NUM_OF_ROBOTS > 2

# MR_ROBOT 4
###########################################

if [[ "MR_NUM_OF_ROBOTS" -gt 3 ]]; then
    robot_id=4
    robot_prefix="MR_ROBOT_${robot_id}"
    core_port=11314
    robot_name="${MR_HOSTNAME}_${core_port}"

    export ${robot_prefix}_MODEL="pioneer_3at"
    export ${robot_prefix}_NAME="${robot_name}"
    export ${robot_prefix}_NRD="CFixedIntervalsNRD_MR"
    export ${robot_prefix}_ERD="CLoopCloserERD_MR"
    export ${robot_prefix}_GSO="CLevMarqGSO"
    export ${robot_prefix}_OLD_ROBOT_NS="unused"

fi # end if MR_NUM_OF_ROBOTS > 3

################################################################################

# Kill all the detached job generated by the current script
KillJobs() {
    printf "\nKilling all child processes...\n\n"
    for job in $(jobs -p); do
            kill -s SIGTERM $job > /dev/null 2>&1 || (sleep 10 && kill -9 $job > /dev/null 2>&1 &)

    done
}

# Function that is to run on EXIT
TrapQuit() {
    # Whatever you need to clean here
    KillJobs
}

trap TrapQuit EXIT SIGINT SIGTERM

# paths to executables
python_bin=$(which python)
rosbag_bin=$(which rosbag)
rosrun_bin=$(which rosrun)

# configuration parameters
# bag file is provided from the command line

# Make sure that user provides just one argument - the bag file
if [ "$#" -ne 1 ]; then
    printf "Invalid number of arguments.\n"
    printf "Usage: run_graphslam_demo.sh <absolute path to rosbag>\n"
    printf "Exiting...\n"
    exit 1;
fi

bag_path=$1


# Run the python script - runs the launchfile once for every indicated robot
$python_bin "${BASH_SOURCE%/*}/../nodes/graphslam_demo.py" &

# Get the numeric IDs of the agents that are to be launched.
function get_array_of_robot_ids() {

echo $(printenv | grep -o MR_ROBOT_[0-9]*_NAME | grep -o [0-9])

}

# Return a string containing all the topics that are to be remapped for a single
# agent and have been recorded as part of the combined rosbag
function remap_topics_str() {

old_robot_ns=$1
new_robot_ns=$2

echo " \
/${old_robot_ns}/input/cmd_vel:=/${new_robot_ns}/input/cmd_vel \
/${old_robot_ns}/input/laser_scan:=/${new_robot_ns}/input/laser_scan \
/${old_robot_ns}/input/odom:=/${new_robot_ns}/input/odom \
/${old_robot_ns}/onboard_camera/image_raw:=/${new_robot_ns}/onboard_camera/image_raw \
/${old_robot_ns}/onboard_camera/image_raw/compressed:=/${new_robot_ns}/onboard_camera/image_raw/compressed \
/${old_robot_ns}/onboard_camera/image_raw/compressed/parameter_descriptions:=/${new_robot_ns}/onboard_camera/image_raw/compressed/parameter_descriptions \
/${old_robot_ns}/onboard_camera/image_raw/compressed/parameter_updates:=/${new_robot_ns}/onboard_camera/image_raw/compressed/parameter_updates \
/${old_robot_ns}/onboard_camera/image_raw/theora:=/${new_robot_ns}/onboard_camera/image_raw/theora \
/${old_robot_ns}/onboard_camera/image_raw/theora/parameter_descriptions:=/${new_robot_ns}/onboard_camera/image_raw/theora/parameter_descriptions \
/${old_robot_ns}/onboard_camera/image_raw/theora/parameter_updates:=/${new_robot_ns}/onboard_camera/image_raw/theora/parameter_updates"

}

remap_topics=
for id in $(get_array_of_robot_ids); do
    old_robot_ns_var="MR_ROBOT_${id}_OLD_ROBOT_NS"
    new_robot_ns_var="MR_ROBOT_${id}_NAME"

    printf "Adding remap topics for robot ID: %s\n" $id
    printf "${!old_robot_ns_var} ==> ${!new_robot_ns_var}\n"

    remap_topics="${remap_topics} \
        $(remap_topics_str ${!old_robot_ns_var} ${!new_robot_ns_var})"
done


printf "Topics Remapping:\n\n${remap_topics}\n\n"

$rosbag_bin play --clock ${bag_path} ${remap_topics} \
    output:="${MR_OUTPUT_MESSSAGES_TO}" &

printf "Launching rviz...\n"

rviz_file=$(rospack find mrpt_graphslam_2d)/rviz/graphslam_bag_${MR_NUM_OF_ROBOTS}.rviz
rosrun rviz rviz -d ${rviz_file} &

# Sleep for a looong time.
# This makes the script stick around for us to issue a signal afterwards
sleep 1800000 # 30m
